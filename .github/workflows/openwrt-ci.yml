# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  #schedule:
   # - cron: 59 * * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h
          
      - name: 添加siropboy插件包源
        run: |
          cd package
          mkdir openwrt-packages
          cd openwrt-packages
          git clone https://github.com/siropboy/sirpdboy-package package/sirpdboy-package
          
      - name: vssr
        run: |
          cd package/lean/  
          git clone https://github.com/jerrykuku/lua-maxminddb.git  #git lua-maxminddb 依赖
          git clone https://github.com/jerrykuku/luci-app-vssr.git
          git clone https://github.com/kenzok8/small.git
    

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file   
        run: |
          cat >> .config <<EOF
          CONFIG_TARGET_ath79=y
          CONFIG_TARGET_ath79_generic=y
          CONFIG_TARGET_ath79_generic_DEVICE_dlink_dir-505=y
          CONFIG_LIBSODIUM_MINIMAL=y
          CONFIG_PACKAGE_SAMBA_MAX_DEBUG_LEVEL=-1
          CONFIG_PACKAGE_antfs-mount=y
          CONFIG_PACKAGE_automount=y
          CONFIG_PACKAGE_autosamba=y
          CONFIG_PACKAGE_bash=y
          CONFIG_PACKAGE_boost=y
          CONFIG_PACKAGE_boost-date_time=y
          CONFIG_PACKAGE_boost-program_options=y
          CONFIG_PACKAGE_boost-system=y
          CONFIG_PACKAGE_coreutils=y
          CONFIG_PACKAGE_coreutils-base64=y
          CONFIG_PACKAGE_ip-full=y
          CONFIG_PACKAGE_ipset=y
          CONFIG_PACKAGE_ipt2socks=y
          CONFIG_PACKAGE_iptables-mod-tproxy=y
          CONFIG_PACKAGE_kcptun-client=y
          CONFIG_PACKAGE_kcptun-config=y
          CONFIG_PACKAGE_kmod-crypto-crc32c=y
          CONFIG_PACKAGE_kmod-fs-antfs=y
          CONFIG_PACKAGE_kmod-fs-exfat=y
          CONFIG_PACKAGE_kmod-fs-ext4=y
          CONFIG_PACKAGE_kmod-fs-vfat=y
          CONFIG_PACKAGE_kmod-ip6tables=y
          CONFIG_PACKAGE_kmod-ipt-tproxy=y
          CONFIG_PACKAGE_kmod-lib-crc16=y
          CONFIG_PACKAGE_kmod-nf-ipt6=y
          CONFIG_PACKAGE_kmod-nf-reject6=y
          CONFIG_PACKAGE_kmod-nls-cp437=y
          CONFIG_PACKAGE_kmod-nls-iso8859-1=y
          CONFIG_PACKAGE_kmod-nls-utf8=y
          CONFIG_PACKAGE_kmod-scsi-core=y
          CONFIG_PACKAGE_kmod-usb-storage=y
          CONFIG_PACKAGE_kmod-usb-storage-extras=y
          CONFIG_PACKAGE_kmod-usb-storage-uas=y
          CONFIG_PACKAGE_libblkid=y
          CONFIG_PACKAGE_libbpf=y
          CONFIG_PACKAGE_libelf=y
          CONFIG_PACKAGE_libev=y
          CONFIG_PACKAGE_libipset=y
          CONFIG_PACKAGE_libmaxminddb=y
          CONFIG_PACKAGE_libmbedtls=y
          CONFIG_PACKAGE_libmnl=y
          CONFIG_PACKAGE_libncurses=y
          CONFIG_PACKAGE_libreadline=y
          CONFIG_PACKAGE_libsodium=y
          CONFIG_PACKAGE_libstdcpp=y
          CONFIG_PACKAGE_libudns=y
          CONFIG_PACKAGE_lua-maxminddb=y
          CONFIG_PACKAGE_luasocket=y
          CONFIG_PACKAGE_luci-app-samba=y
          CONFIG_PACKAGE_luci-app-vssr=y
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_ShadowsocksR_Libev_Server=y
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Trojan=y
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray=y
          CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray_plugin=y
          CONFIG_PACKAGE_luci-i18n-samba-zh-cn=y
          CONFIG_PACKAGE_pdnsd-alt=y
          CONFIG_PACKAGE_samba36-server=y
          CONFIG_PACKAGE_shadowsocks-libev-config=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-local=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-redir=y
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-check=y
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-local=y
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-redir=y
          CONFIG_PACKAGE_shadowsocksr-libev-ssr-server=y
          CONFIG_PACKAGE_simple-obfs-client=y
          CONFIG_PACKAGE_terminfo=y
          CONFIG_PACKAGE_trojan=y
          CONFIG_PACKAGE_vpnbypass=y
          CONFIG_PACKAGE_wsdd2=y
          CONFIG_PACKAGE_xray-core=y
          CONFIG_PACKAGE_xray-plugin=y
          CONFIG_XRAY_CORE_COMPRESS_UPX=y
          CONFIG_boost-compile-visibility-hidden=y
          CONFIG_boost-runtime-shared=y
          CONFIG_boost-static-and-shared-libs=y
          CONFIG_boost-variant-release=y

          EOF
          
          make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
